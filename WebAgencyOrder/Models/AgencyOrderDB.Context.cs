//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAgencyOrder.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DevConn : DbContext
    {
        public DevConn()
            : base("name=DevConn")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Goods_Received_Note> Goods_Received_Note { get; set; }
        public virtual DbSet<ImportedItem> ImportedItems { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<OrderProduct> OrderProducts { get; set; }
        public virtual DbSet<OrderReceipt> OrderReceipts { get; set; }
    
        public virtual int procItems(string itemsID, string itemsName, Nullable<double> itemsPrice, Nullable<int> itemsQuantity, string benefit)
        {
            var itemsIDParameter = itemsID != null ?
                new ObjectParameter("itemsID", itemsID) :
                new ObjectParameter("itemsID", typeof(string));
    
            var itemsNameParameter = itemsName != null ?
                new ObjectParameter("itemsName", itemsName) :
                new ObjectParameter("itemsName", typeof(string));
    
            var itemsPriceParameter = itemsPrice.HasValue ?
                new ObjectParameter("itemsPrice", itemsPrice) :
                new ObjectParameter("itemsPrice", typeof(double));
    
            var itemsQuantityParameter = itemsQuantity.HasValue ?
                new ObjectParameter("itemsQuantity", itemsQuantity) :
                new ObjectParameter("itemsQuantity", typeof(int));
    
            var benefitParameter = benefit != null ?
                new ObjectParameter("benefit", benefit) :
                new ObjectParameter("benefit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procItems", itemsIDParameter, itemsNameParameter, itemsPriceParameter, itemsQuantityParameter, benefitParameter);
        }
    }
}
